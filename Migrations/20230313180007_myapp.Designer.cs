// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ms_controle_financeiro.Data;

#nullable disable

namespace mscontrolefinanceiro.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20230313180007_myapp")]
    partial class myapp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ms_controle_financeiro.Model.Entities.Input", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InputDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("input_date");

                    b.Property<string>("ToBankAccount")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("to_bank_account");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("input");
                });

            modelBuilder.Entity("ms_controle_financeiro.Model.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("double precision")
                        .HasColumnName("balance");

                    b.Property<bool>("Received")
                        .HasColumnType("boolean")
                        .HasColumnName("received");

                    b.Property<DateTime>("TransitionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("transition_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("log");
                });

            modelBuilder.Entity("ms_controle_financeiro.Model.Entities.Output", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("HasInterest")
                        .HasColumnType("boolean")
                        .HasColumnName("has_interest");

                    b.Property<DateTime>("OutputDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("output_date");

                    b.Property<string>("ReferingTo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refering_to");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("output");
                });

            modelBuilder.Entity("ms_controle_financeiro.Model.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Balances")
                        .HasColumnType("double precision")
                        .HasColumnName("balances");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<double>("ExpectedSalary")
                        .HasColumnType("double precision")
                        .HasColumnName("expected_salary");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Work")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("work");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("ms_controle_financeiro.Model.Entities.Input", b =>
                {
                    b.HasOne("ms_controle_financeiro.Model.Entities.User", "User")
                        .WithMany("Inputs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ms_controle_financeiro.Model.Entities.Log", b =>
                {
                    b.HasOne("ms_controle_financeiro.Model.Entities.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ms_controle_financeiro.Model.Entities.Output", b =>
                {
                    b.HasOne("ms_controle_financeiro.Model.Entities.User", "User")
                        .WithMany("Outputs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ms_controle_financeiro.Model.Entities.User", b =>
                {
                    b.Navigation("Inputs");

                    b.Navigation("Logs");

                    b.Navigation("Outputs");
                });
#pragma warning restore 612, 618
        }
    }
}
